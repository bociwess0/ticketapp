// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Ticket {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(255)
  description      String   @db.Text
  status           Status   @default(OPEN)
  priority         Priority @default(MEDIUM)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  assignedToUserId Int?
  assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
  cartItems        CartItem[]
  orderItems       OrderItem[]
}

enum Status {
  OPEN
  STARTED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  username        String   @unique
  password        String
  role            Role     @default(USER)
  assignedTickets Ticket[]
  carts           Cart[]
  orders          Order[]
}

enum Role {
  ADMIN
  TECH
  USER
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  quantity  Int      @default(1) // Optional: if the same ticket can be added multiple times
}

model Order {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  total     Float
  status    OrderStatus @default(PENDING)
  items     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  quantity  Int      @default(1)
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}